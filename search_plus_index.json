{"./":{"url":"./","title":"前言","keywords":"","body":"Gitlab Handbook 此书是gitlab的阅读与理解，帮助大家更快了解gitlab的管理和使用。 GitHub地址：https://github.com/eiuapp/gitlab-handbook 在线访问地址：https://eiuapp.github.io/gitlab-handbook gitlab是著名的CICD系统。 相关资源 关于 本书中引用了一些公开的分享与链接并加以整理。 本书作于2019年初，会持续更新。 Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "},"post/env.html":{"url":"post/env.html","title":"环境","keywords":"","body":"env-1 tl-lan-server-a host: ubuntu 18.04 os: ubuntu docker: ce 18.09.6 gitlab: gitlab-ce-11.9.1-2 gitlab-runner: gitlab-runner:ubuntu-v11.11.1 Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "},"post/install-gitlab-with-docker.html":{"url":"post/install-gitlab-with-docker.html","title":"docker安装gitlab","keywords":"","body":"https://docs.gitlab.com/ee/install/docker.html 拉取镜像 https://hub.docker.com/r/gitlab/gitlab-ce/tags docker pull gitlab/gitlab-ce:11.10.0-ce.0 启动 sudo docker run --detach \\ --hostname gitlab.tianluoteam.com \\ --publish 5443:443 --publish 5080:80 --publish 5022:22 \\ --name gitlab \\ --restart always \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ store/gitlab/gitlab-ce:10.2.4-ce.0 sudo docker run --detach \\ --hostname 192.168.168.164 \\ --publish 443:443 --publish 80:80 --publish 22:22 \\ --name gitlab-tl \\ --restart always \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ store/gitlab/gitlab-ce:10.2.4-ce.0 sudo docker run --detach \\ --hostname 192.168.168.164 \\ --publish 443:443 --publish 80:80 --publish 22:22 \\ --name gitlab-ce-11.10.0-ce.0 \\ --restart always \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ gitlab/gitlab-ce:11.10.0-ce.0 sudo docker run --detach \\ --hostname 192.168.168.164 \\ --publish 443:443 --publish 80:80 --publish 22:22 \\ --name gitlab-ce-11.10.0-ce.0 \\ --restart always \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ gitlab/gitlab-ce:11.9.1-ce.0 sudo docker run --detach \\ --hostname 192.168.168.164 \\ --publish 443:443 --publish 80:80 --publish 22:22 \\ --name gitlab-ce-11.9.1-2 \\ --restart always \\ --volume /srv/gitlab9.1/config:/etc/gitlab \\ --volume /srv/gitlab9.1/logs:/var/log/gitlab \\ --volume /srv/gitlab9.1/data:/var/opt/gitlab \\ gitlab/gitlab-ce:11.9.1-ce.0 chrome: http://192.168.168.164 输入密码后，会让修改密码的。 如果第一次不知道输入什么密码，那就走修改密码方式。 Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "},"post/not-allowed-to-push-code-to-protected-branches.html":{"url":"post/not-allowed-to-push-code-to-protected-branches.html","title":"不能push到仓库","keywords":"","body":"当第一次向gitlab仓库中push或者pull 时，出现如下信息： you are not allowed to push code to protected branches on this project https://blog.csdn.net/zzh920625/article/details/78087669 那么需要先找管理员，确认一下 protected branches. 注意 版本最好>11.9.0, 原因 这里 ref https://stackoverflow.com/questions/32246503/fix-gilab-error-you-are-not-allowed-to-push-code-to-protected-branches-on-this https://stackoverflow.com/questions/45814843/gitlab-unable-to-push-to-master-branch https://gitlab.com/gitlab-org/gitlab-ce/issues/59443 Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "},"post/gitlab-protected-branches.html":{"url":"post/gitlab-protected-branches.html","title":"gitlab 设置了 protected branches","keywords":"","body":"gitlab 设置了 protected branches 后，还是没有显示 There are currently no protected branches, protect a branch with the form above. 原来是必须要在master分支提交一次。 Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "},"post/gitlab-change-url.html":{"url":"post/gitlab-change-url.html","title":"gitlab域名修改","keywords":"","body":"gitlab域名修改 https://juejin.im/post/5b7f724c51882542f5046ef1 root@gitlab:/# cd /opt/gitlab/embedded/service/gitlab-rails/ root@gitlab:/opt/gitlab/embedded/service/gitlab-rails# ls CHANGELOG.md GITLAB_PAGES_VERSION Gemfile MAINTENANCE.md README.md VERSION builds config.ru doc_styleguide.md fixtures locale public scripts tmp yarn.lock CONTRIBUTING.md GITLAB_SHELL_VERSION Gemfile.lock PROCESS.md REVISION app changelogs db docker generator_templates log qa shared tsconfig.json GITALY_SERVER_VERSION GITLAB_WORKHORSE_VERSION LICENSE Procfile Rakefile bin config doc docker-compose.yml lib package.json rubocop symbol vendor root@gitlab:/opt/gitlab/embedded/service/gitlab-rails# vi config root@gitlab:/opt/gitlab/embedded/service/gitlab-rails# vi /var/opt/gitlab/gitlab-rails/etc/gitlab.yml root@gitlab:/opt/gitlab/embedded/service/gitlab-rails# which gitlab-ctl /opt/gitlab/bin/gitlab-ctl root@gitlab:/opt/gitlab/embedded/service/gitlab-rails# gitlab-ctl restart ok: run: gitaly: (pid 929) 1s ok: run: gitlab-monitor: (pid 940) 0s ok: run: gitlab-workhorse: (pid 950) 1s ok: run: logrotate: (pid 961) 0s ok: run: nginx: (pid 970) 1s ok: run: node-exporter: (pid 979) 0s ok: run: postgres-exporter: (pid 985) 0s ok: run: postgresql: (pid 995) 1s ok: run: prometheus: (pid 1003) 0s ok: run: redis: (pid 1012) 1s ok: run: redis-exporter: (pid 1017) 0s ok: run: sidekiq: (pid 1059) 0s ok: run: sshd: (pid 1062) 0s ok: run: unicorn: (pid 1066) 1s root@gitlab:/opt/gitlab/embedded/service/gitlab-rails# ref https://segmentfault.com/q/1010000000689162 https://juejin.im/post/5b7f724c51882542f5046ef1 Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "},"post/gitlab-runner.html":{"url":"post/gitlab-runner.html","title":"gitlab-runner安装与使用","keywords":"","body":"gitlab-runner安装与使用 env env-1 tl-lan-server-a step sudo docker run -d --name gitlab-runner --restart always -v /var/run/docker.sock:/var/run/docker.sock -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner:ubuntu-v11.11.1 ubuntu@utuntu:~/lcnx/aliyun/tomcat-data$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 640f0e0c3642 gitlab/gitlab-runner:ubuntu-v11.11.1 \"/usr/bin/dumb-init …\" 27 hours ago Up 27 hours gitlab-runner b4c4ccdd3baa gitlab/gitlab-ce:11.9.1-ce.0 \"/assets/wrapper\" 33 hours ago Up 33 hours (healthy) 0.0.0.0:22->22/tcp, 0.0.0.0:12280->80/tcp, 0.0.0.0:12443->443/tcp gitlab-ce-11.9.1-2 http://walterinsh.github.io/2016/04/18/using-gitlab-ci.html https://www.cnblogs.com/xishuai/p/ubuntu-install-gitlab-runner-with-docker.html ubuntu@utuntu:~/lcnx/aliyun/tomcat-data$ docker exec -it gitlab-runner gitlab-runner register Runtime platform arch=amd64 os=linux pid=121 revision=5a147c92 version=11.11.1 Running in system-mode. Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/): http://192.168.168.137:12280/ Please enter the gitlab-ci token for this runner: 5nnXzbP4cYe3qPUvgJ_z Please enter the gitlab-ci description for this runner: [640f0e0c3642]: my-runner Please enter the gitlab-ci tags for this runner (comma separated): my-tag Registering runner... succeeded runner=5nnXzbP4 Please enter the executor: docker-windows, docker-ssh, shell, virtualbox, docker-ssh+machine, docker, ssh, docker+machine, kubernetes, parallels: docker Please enter the default Docker image (e.g. ruby:2.1): node:11.15.0 Runner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! ubuntu@utuntu:~/lcnx/aliyun/tomcat-data$ 验证 chrome: http://192.168.168.137:12280/admin/runners 应该能看到 gitlab runners 就是成功了. 查看 version, status ubuntu@utuntu:~/lcnx/local$ docker exec -it gitlab-runner gitlab-runner --version Version: 11.11.1 Git revision: 5a147c92 Git branch: 11-11-stable GO version: go1.8.7 Built: 2019-05-24T12:32:58+0000 OS/Arch: linux/amd64 ubuntu@utuntu:~/lcnx/local$ docker exec -it gitlab-runner gitlab-runner status Runtime platform arch=amd64 os=linux pid=165 revision=5a147c92 version=11.11.1 gitlab-runner: Service is not running. ubuntu@utuntu:~/lcnx/local$ 使用 error: port 80: Connection refused 报错如下: Running with gitlab-runner 11.11.1 (5a147c92) on my-runner kj6xC-zB Using Docker executor with image node:latest ... Pulling docker image node:latest ... Using docker image sha256:6be2fabd419658c51f44d7c2a1a4a6fd172125c11e718a7eb989e74b8b2f9e5a for node:latest ... Running on runner-kj6xC-zB-project-2-concurrent-0 via 640f0e0c3642... Reinitialized existing Git repository in /builds/FED/lvchuang-web/.git/ Fetching changes... fatal: unable to access 'http://gitlab-ci-token:xxxxxxxxxxxxxxxxxxxx@192.168.168.137/FED/lvchuang-web.git/': Failed to connect to 192.168.168.137 port 80: Connection refused ERROR: Job failed: exit code 1 https://gitlab.com/gitlab-org/gitlab-runner/issues/3091 因为这里,我们的 gitlab url 是 192.168.168.137:12080, 但是这里报的是 80: Connection refused 所以先尝试解决这个 port 不一致的问题. 我这里,先简单处理, 把gitlab dokcer 直接使用 80 端口. 然后,发现,可以使用了. pending This job is stuck because you don't have any active runners online with any of these tags assigned to them: my-tag Go to Runners page 因为我的配置与官网是相同的,还是要回到官网来看一下日志 https://docs.gitlab.com/runner/install/docker.html#reading-gitlab-runner-logs For example, if GitLab Runner was started with the following command: docker run -d --name gitlab-runner --restart always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v /srv/gitlab-runner/config:/etc/gitlab-runner \\ gitlab/gitlab-runner:latest you may get the logs with: docker logs gitlab-runner 输出信息: WARNING: Checking for jobs... failed runner=VE3S_jfp status=couldn't execute POST against http://192.168.168.137/api/v4/jobs/request: Post http://192.168.168.137/api/v4/jobs/request: dial tcp 192.168.168.137:80: i/o timeout WARNING: Checking for jobs... failed runner=VE3S_jfp status=couldn't execute POST against http://192.168.168.137/api/v4/jobs/request: Post http://192.168.168.137/api/v4/jobs/request: dial tcp 192.168.168.137:80: i/o timeout WARNING: Checking for jobs... failed runner=VE3S_jfp status=couldn't execute POST against http://192.168.168.137/api/v4/jobs/request: Post http://192.168.168.137/api/v4/jobs/request: dial tcp 192.168.168.137:80: i/o timeout 说明是 container 到达不了 192.168.168.137:80, 那么, 先检查一下 防火墙. 果然,就是这个问题. sudo ufw allow from 172.17.0.1/16 to any port 80 重试. 成功. gitlab runner permission deny 可能是: 电脑重启了 docker 的数据盘放在了其它硬盘 导致: root@utuntu:/home/ubuntu/fangyuan/local/fs.delete.20191230# docker ps | grep gitlab-runner 65fa431b0ec1 gitlab/gitlab-runner:ubuntu-v11.11.1 \"/usr/bin/dumb-init …\" 6 months ago Up 6 hours gitlab-runner-shell be6755a2746c gitlab/gitlab-runner:ubuntu-v11.11.1 \"/usr/bin/dumb-init …\" 7 months ago Up 6 hours gitlab-runner root@utuntu:/home/ubuntu/fangyuan/local/fs.delete.20191230# docker logs -f gitlab-runner ... WARNING: Checking for jobs... failed runner=VE3S_jfp status=couldn't execute POST against http://192.168.168.137/api/v4/jobs/request: Post http://192.168.168.137/api/v4/jobs/request: read tcp 172.17.0.3:59338->192.168.168.137:80: read: connection reset by peer WARNING: Checking for jobs... failed runner=2K7oPJtf status=couldn't execute POST against http://192.168.168.137/api/v4/jobs/request: Post http://192.168.168.137/api/v4/jobs/request: read tcp 172.17.0.3:59346->192.168.168.137:80: read: connection reset by peer WARNING: Checking for jobs... failed runner=VE3S_jfp status=502 Bad Gateway WARNING: Checking for jobs... failed runner=2K7oPJtf status=502 Bad Gateway jobs 中会显示对 某个文件夹 permission deny, 如: Running with gitlab-runner 10.5.0 (10.5.0) on api-deploy-runner obhhKvSY Using Shell executor... Running on utuntu... Fetching changes... HEAD is now at 8bd0543 fix pms_grant_option_stage_detail saveNewBulk From http://192.168.168.137/fangyuan/fangyuan-server 8bd0543..749e544 dev -> origin/dev Checking out 749e5449 as dev... Skipping Git submodules setup $ echo \"hello fangyuan-server\" hello fangyuan-server $ echo \"deploy_test\" deploy_test $ echo $PWD && ls ~ /home/ubuntu/gitlabRunner/builds/obhhKvSY/0/fangyuan/fangyuan-server logs $ bash /home/ubuntu/lcnx/local/scripts/fangyuan-server/deploy/deploy-test.sh Mon Dec 30 15:08:24 CST 2019 20191230150824 fatal: Unable to create '/home/ubuntu/fangyuan/local/fangyuan-server-run-start/.git/index.lock': Permission denied Cannot save the current index state error: cannot open .git/FETCH_HEAD: Permission denied cp: cannot create regular file 'config/config.prod.js': Permission denied ... ... ... npm ERR! A complete log of this run can be found in: npm ERR! /var/lib/gitlab-runner/.npm/_logs/2019-12-30T07_08_29_657Z-debug.log docker Job succeeded 但是,后来,又时不时 没有这个 permission denied. # 说明 install example install gitlab-ci sudo docker run --detach \\ --restart always \\ --hostname 192.168.168.137 \\ --publish 12443:443 --publish 80:80 --publish 22:22 \\ --name gitlab-ce-11.9.1-2 \\ --volume /srv/gitlab9.1/config:/etc/gitlab \\ --volume /srv/gitlab9.1/logs:/var/log/gitlab \\ --volume /srv/gitlab9.1/data:/var/opt/gitlab \\ gitlab/gitlab-ce:11.9.1-ce.0 gitlab-runner-docker sudo docker run -d --name gitlab-runner --restart always -v /var/run/docker.sock:/var/run/docker.sock -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner:ubuntu-v11.11.1 gitlab-runner-shell sudo docker run -d --name gitlab-runner-shell --restart always -v /var/run/docker.sock:/var/run/docker.sock -v /srv/gitlab-runner-ubuntu-v11/shell/config:/etc/gitlab-runner gitlab/gitlab-runner:ubuntu-v11.11.1 runner token 启动后看一下 root@utuntu:/srv/gitlab-runner-ubuntu-v11/shell/config# cat config.toml concurrent = 1 check_interval = 0 [session_server] session_timeout = 1800 [[runners]] name = \"shell-runner\" url = \"http://192.168.168.137/\" token = \"S-j8EMnmzTbxRNPyCpad\" executor = \"shell\" [runners.custom_build_dir] [runners.cache] [runners.cache.s3] [runners.cache.gcs] root@utuntu:/srv/gitlab-runner-ubuntu-v11/shell/config# 上面的这个token值S-j8EMnmzTbxRNPyCpad会显示在docker logs -f gitlab-runner-shell的输出中. Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "},"post/gitlab-runner-startup-but-gitlab-ce-not-startup.html":{"url":"post/gitlab-runner-startup-but-gitlab-ce-not-startup.html","title":"gitlab-runner先启动报错","keywords":"","body":"root@utuntu:/home/ubuntu# docker logs gitlab-runner WARNING: Checking for jobs... failed runner=2K7oPJtf status=couldn't execute POST against http://192.168.168.137/api/v4/jobs/request: Post http://192.168.168.137/api/v4/jobs/request: dial tcp 192.168.168.137:80: getsockopt: connection refused WARNING: Checking for jobs... failed runner=VE3S_jfp status=couldn't execute POST against http://192.168.168.137/api/v4/jobs/request: Post http://192.168.168.137/api/v4/jobs/request: dial tcp 192.168.168.137:80: getsockopt: connection refused WARNING: Checking for jobs... failed runner=2K7oPJtf status=couldn't execute POST against http://192.168.168.137/api/v4/jobs/request: Post http://192.168.168.137/api/v4/jobs/request: dial tcp 192.168.168.137:80: getsockopt: connection refused WARNING: Checking for jobs... failed runner=VE3S_jfp status=couldn't execute POST against http://192.168.168.137/api/v4/jobs/request: Post http://192.168.168.137/api/v4/jobs/request: dial tcp 192.168.168.137:80: getsockopt: connection refused WARNING: Checking for jobs... failed runner=2K7oPJtf status=couldn't execute POST against http://192.168.168.137/api/v4/jobs/request: Post http://192.168.168.137/api/v4/jobs/request: dial tcp 192.168.168.137:80: getsockopt: connection refused 说明，gitlab-ce 本身未启动。 启动就可以了 ubuntu@utuntu:~$ sudo docker run --detach --restart always --hostname 192.168.168.137 --publish 12443:443 --publish 80:80 --publish 22:22 --name gitlab-ce-11.9.1-2 --volume /srv/gitlab9.1/config:/etc/gitlab --volume /srv/gitlab9.1/logs:/var/log/gitlab --volume /srv/gitlab9.1/data:/var/opt/gitlab gitlab/gitlab-ce:11.9.1-ce.0 [sudo] password for ubuntu: 52a10ef83006bda072a5c9df5b3d548f05dd548ae887bc64d3277e7b3280b199 ubuntu@utuntu:~$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 52a10ef83006 gitlab/gitlab-ce:11.9.1-ce.0 \"/assets/wrapper\" 2 seconds ago Up 1 second (health: starting) 0.0.0.0:22->22/tcp, 0.0.0.0:80->80/tcp, 0.0.0.0:12443->443/tcp gitlab-ce-11.9.1-2 44014ef848a5 codercom/code-server \"dumb-init code-serv…\" 2 months ago Up 48 minutes 0.0.0.0:8443->8443/tcp happy_ramanujan 8303dc0b8742 swaggerapi/swagger-ui:20190808 \"sh /usr/share/nginx…\" 2 months ago Up 48 minutes 80/tcp, 0.0.0.0:3080->8080/tcp swagger-ui 8bc56d42ee67 swaggerapi/swagger-editor:20190808 \"sh /usr/share/nginx…\" 2 months ago Up 48 minutes 0.0.0.0:3081->8080/tcp swagger-editor 086bdb8baa32 mysql03-save:20190525 \"docker-entrypoint.s…\" 3 months ago Up 48 minutes 0.0.0.0:3306->3306/tcp mysql03-20190525 bb97a9e27f4a yapi \"/api/docker-entrypo…\" 4 months ago Up 48 minutes 0.0.0.0:3001->3001/tcp yapi cfbaa6436964 mongo:4 \"docker-entrypoint.s…\" 4 months ago Up 48 minutes 0.0.0.0:27017->27017/tcp mongod 65fa431b0ec1 gitlab/gitlab-runner:ubuntu-v11.11.1 \"/usr/bin/dumb-init …\" 4 months ago Up 48 minutes gitlab-runner-shell 374e972d1fac some-redis-save \"docker-entrypoint.s…\" 4 months ago Up 48 minutes 0.0.0.0:6379->6379/tcp some-redis be6755a2746c gitlab/gitlab-runner:ubuntu-v11.11.1 \"/usr/bin/dumb-init …\" 4 months ago Up 48 minutes gitlab-runner ubuntu@utuntu:~$ Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "},"post/gitlab-faq.html":{"url":"post/gitlab-faq.html","title":"gitlab faq","keywords":"","body":"取消Default to Auto DevOps pipeline for all projects的选择框 https://blog.csdn.net/weixin_44723434/article/details/88425094 mkdir: cannot create directory ‘/home/ubuntu/gitlabRunner/builds’: Permission denied 在一次机器重启后, 发现, 重启gitlab-runner后, 需要一个 gitlabRunner/builds 的文件夹, 所以我就手动创建了. sudo mkdir -p /home/ubuntu/gitlabRunner/builds 然后,在运行 gitlab-runner 时,日志中会有如下错误: Running with gitlab-runner 10.5.0 (10.5.0) on api-deploy-runner obhhKvSY Using Shell executor... Running on utuntu... mkdir: cannot create directory ‘/home/ubuntu/gitlabRunner/builds’: Permission denied ERROR: Job failed: exit status 1 这时, sudo cat /etc/passwd 会发现 gitlab-runner 用户, 所以, 这里要修改 文件夹的 用户属性. sudo chown -R gitlab-runner:gitlab-runner /home/ubuntu/gitlabRunner/ 问题解决了. Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "},"post/gitlab-node-project-cicd.html":{"url":"post/gitlab-node-project-cicd.html","title":"gitlab cicd 以 nodejs 项目为例","keywords":"","body":"gitlab cicd + node project https://segmentfault.com/a/1190000017174825 https://docs.gitlab.com/ee/ci/ssh_keys/README.html#ssh-keys-when-using-the-docker-executor 前端部分的 gitlab-ci.yaml https://docs.gitlab.com/ce/ci/yaml/#before_script-and-after_script before_script 的内容有调整, 因为, 我们只需要在 deploy_test 和 deploy_production 的时候, 运行就可以了. 然后,因为 deploy_test 和 deploy_production 的机器不同, 所以,设置了2份SSH_KNOWN_HOSTS 和 SSH_PRIVATE_KEY 原理: 把一份能够完成免密 scp 或 ssh 的机器密钥与对应的密钥指纹放到 gitlab JOB启动的 gitlab-runner container中, 让 gitlab-runner container 来完成这个事情. 注意 这里配置的 SSH_KNOWN_HOSTS 和 SSH_PRIVATE_KEY 是 gitlab project 的 Maintainer 或 以上权限的所有者可查. 也就是意味着, scp,ssh对应的机器,会有权被其控制. SSH_KNOWN_HOSTS 的来源 https://liam.page/2018/01/24/ssh-keyscan/ 可见, ssh-keyscan 是来获取 密钥指纹的. ssh-keyscan IP 如果是多个IP, 则写进文件里. ubuntu@utuntu:~$ cat hosts.txt 192.168.168.137 192.168.168.138 120.77.***.*** ubuntu@utuntu:~$ ssh-keyscan -f hosts.txt SSH_PRIVATE_KEY cat ~/.ssh/id_rsa 具体地,我的 .gitlab-ci.yml 文件如下: 后端部分 gitlab ci 后端使用 docker 直接在 host 上启用服务 docker 服务单独启动能正常运行 Dockerfile 这里的 Dockerfile 参考了 https://pm2.io/doc/en/runtime/integration/docker/ https://www.jianshu.com/p/ab76ba86eafc FROM keymetrics/pm2:latest-alpine # Bundle APP files RUN mkdir -p /home/service WORKDIR /home/service COPY . /home/service # COPY src src/ # COPY package.json . # COPY ecosystem.config.js . # Install app dependencies ENV NPM_CONFIG_LOGLEVEL warn RUN npm install # Expose the listening port of your app EXPOSE 3011 # Show current folder structure in logs RUN ls -al -R CMD [ \"pm2-runtime\", \"start\", \"ecosystem.config.js\", \"--only\", \"server-dev\" ] 制作docker image docker build -t lvchuang-server-test4 . docker run docker run -d --name lvchuang-server -p 2011:3011 lvchuang-server-test4 验证 chrome: http://192.168.168.137:2011/GetStage host 安装 gitlab-ci-multi-runner sudo apt-get install gitlab-ci-multi-runner 把 gitlab-runner 用户加入 docker 组 sudo usermod -aG docker gitlab-runner gitlab-runner register gitlab-ci-multi-runner register 注册过程中,executor 选择 shell. 具体完成后, 可见 config.toml 文件. ubuntu@utuntu:~/lcnx/local/lvchuang-server$ cat ~/.gitlab-runner/config.toml concurrent = 1 check_interval = 0 [[runners]] name = \"api-deploy-runner\" url = \"http://192.168.168.137/\" token = \"obhhKvSY4s5M1pGp49mf\" executor = \"shell\" [runners.cache] gitlab-runner 验证 gitlab-ci-multi-runner register gitlab-ci-multi-runner --help sudo gitlab-ci-multi-runner status gitlab-ci-multi-runner verify gitlab-ci-multi-runner list 具体效果看一下 ubuntu@utuntu:~/lcnx/local/lvchuang-server$ !1321 sudo gitlab-ci-multi-runner status [sudo] password for ubuntu: gitlab-runner: Service is running! ubuntu@utuntu:~/lcnx/local/lvchuang-server$ gitlab-ci-multi-runner verify WARNING: Running in user-mode. WARNING: The user-mode requires you to manually start builds processing: WARNING: $ gitlab-runner run WARNING: Use sudo for system-mode: WARNING: $ sudo gitlab-runner... Verifying runner... is alive runner=obhhKvSY Verifying runner... is alive runner=k7U2n9Sb ubuntu@utuntu:~/lcnx/local/lvchuang-server$ gitlab-ci-multi-runner list Listing configured runners ConfigFile=/home/ubuntu/.gitlab-runner/config.toml api-deploy-runner Executor=shell Token=obhhKvSY4s5M1pGp49mf URL=http://192.168.168.137/ ssh-multi-runner Executor=ssh Token=k7U2n9Sb8ErrXa5nzLDr URL=http://192.168.168.137/ ubuntu@utuntu:~/lcnx/local/lvchuang-server$ .gitlab-ci.yml tag 写之前 gitlab-runner register 时填写的对应. 注意 下的script中,写的就是 docker 相关命令 image: node:11.15.0 stages: - deploy_test cache: key: ${CI_BUILD_REF_NAME} paths: - node_modules/ before_script: - export PATH=/usr/local/bin:$PATH # 部署测试服务器 deploy_test: stage: deploy_test tags: - node-api-deploy-test only: - dev - master script: - 'echo \"deploy_test\"' - 'echo $PWD && ls ~' - docker cp ./ lvchuang-server:/home/service - docker restart lvchuang-server git push 更新代码, git push 至 repo 观察 gitalb.com 选择好 runner 从 gitlab page: http://192.168.168.137 中看到, pipeline 下的 job 是 pending 状态的. 也就是意味着, 没启动. gitlab-ci-multi-runner run ubuntu@utuntu:~/lcnx/local/lvchuang-server$ gitlab-ci-multi-runner run Starting multi-runner from /home/ubuntu/.gitlab-runner/config.toml ... builds=0 WARNING: Running in user-mode. WARNING: Use sudo for system-mode: WARNING: $ sudo gitlab-runner... Configuration loaded builds=0 Metrics server disabled Checking for jobs... received job=302 repo_url=http://192.168.168.137/zengyunlong/test4.git runner=obhhKvSY Job succeeded job=302 project=12 runner=obhhKvSY Checking for jobs... received job=303 repo_url=http://192.168.168.137/zengyunlong/test4.git runner=obhhKvSY Job succeeded job=303 project=12 runner=obhhKvSY ^CAll workers stopped. Can exit now builds=0 WARNING: Requested service stop: interrupt builds=0 ubuntu@utuntu:~/lcnx/local/lvchuang-server$ 相应地, 看到 pending 已经开始 running 了. 具体日志如下: Running with gitlab-runner 10.5.0 (10.5.0) on api-deploy-runner obhhKvSY Using Shell executor... Running on utuntu... Fetching changes... HEAD is now at c09fdc9 fix From http://192.168.168.137/zengyunlong/test4 c09fdc9..10f12d7 master -> origin/master Checking out 10f12d72 as master... Skipping Git submodules setup Checking cache for master... Successfully extracted cache $ export PATH=/usr/local/bin:$PATH $ echo \"deploy_test\" deploy_test $ echo $PWD && ls ~ /home/ubuntu/lcnx/local/lvchuang-server/builds/obhhKvSY/0/zengyunlong/test4 default.conf docker env hosts.txt index.html lcnx test-dev $ docker cp ./ lvchuang-server:/home/service $ docker restart lvchuang-server lvchuang-server Creating cache master... WARNING: node_modules/: no matching files Archive is up to date! Created cache Job succeeded 从日志里看出, 当 executor 为 shell 时, 实际上, gitlab-runner 是在host上执行命令的. 所以, 在 .gitlab-ci.yml 中运行的命令,实际上就是以 gitlab-runner 这个用户在host上面运行. gitlab-runner 如何自启动 因为上面的运行, 需要, 手动地在命令行下执行 ``, 所以我们需要更进一步,让系统自动完成,这个操作. 参考: https://www.jianshu.com/p/2b43151fb92e https://www.cnblogs.com/jiukun/p/7481287.html (特别是 gitlab-ci-multi-runner run, install, start, stop, restart 之间的关系介绍) https://blog.csdn.net/xl_lx/article/details/78329019 https://www.cnblogs.com/cnundefined/p/7095368.html install 包装 ubuntu@utuntu:~/lcnx/local/test/test4$ sudo gitlab-ci-multi-runner install -n \"jiukun_self_runner_2\" -d \"/home/ubuntu/lcnx/local/test/test4\" -c \"/home/ubuntu/.gitlab-runner/config.toml\" -u ubuntu 执行上述安装命令时，gitlab-ci-multi-runner后台实际是将run命令写入/etc/systemd/system/jiukun_self_runner_2.service文件，使之成为一个单独的服务 启动服务 ubuntu@utuntu:~/lcnx/local/test/test4$ gitlab-ci-multi-runner start -n jiukun_self_runner_2 FATAL: Please run the commands as root ubuntu@utuntu:~/lcnx/local/test/test4$ sudo gitlab-ci-multi-runner start -n jiukun_self_runner_2 ubuntu@utuntu:~/lcnx/local/test/test4$ ls /etc/systemd/system/jiukun* jiukun_self_runner_2.service 验证是否启动 ubuntu@utuntu:~/lcnx/local/test/test4$ gitlab-ci-multi-runner status FATAL: Please run the commands as root ubuntu@utuntu:~/lcnx/local/test/test4$ sudo gitlab-ci-multi-runner status gitlab-runner: Service is running! ubuntu@utuntu:~/lcnx/local/test/test4$ sudo gitlab-ci-multi-runner status -n jiukun_self_runner_2 jiukun_self_runner_2: Service is running! ubuntu@utuntu:~/lcnx/local/test/test4$ sudo gitlab-runner list --config /home/ubuntu/.gitlab-runner/config.toml Listing configured runners ConfigFile=/home/ubuntu/.gitlab-runner/config.toml api-deploy-runner Executor=shell Token=obhhKvSY4s5M1pGp49mf URL=http://192.168.168.137/ ssh-multi-runner Executor=ssh Token=k7U2n9Sb8ErrXa5nzLDr URL=http://192.168.168.137/ ubuntu@utuntu:~/lcnx/local/test/test4$ sudo gitlab-runner verify --config /home/ubuntu/.gitlab-runner/config.toml Running in system-mode. Verifying runner... is alive runner=obhhKvSY Verifying runner... is alive runner=k7U2n9Sb ubuntu@utuntu:~/lcnx/local/test/test4$ sudo gitlab-ci-multi-runner status -n jiukun_self_runner_2 jiukun_self_runner_2: Service is running! ubuntu@utuntu:~/lcnx/local/test/test4$ sudo gitlab-ci-multi-runner status -n jiukun_self_runner jiukun_self_runner: Service is not running. 管理服务 1.注册的runner列表 gitlab-runner list \\ --config \"/etc/gitlab-runner/config_jiukun_test.toml\" 2.查看runner连接状态 gitlab-runner verify \\ --config \"/etc/gitlab-runner/config_jiukun_test.toml\" 3.取消注册（移除） gitlab-runner unregistry \\ --url http://gitlab.xxxxxx.com/ci \\ --token 9c1bb50065661ba766023016f6ebf2 不能直接在project的web端进行remove操作，否则这里会执行失败 4.管理gitlab-runner服务 gitlab-runner status \\ -n jiukun_self_runner.service 不指定服务名，则默认为gitlab-runner服务 gitlab-runner stop \\ -n jiukun_self_runner.service gitlab-runner restart \\ -n jiukun_self_runner.service gitlab-runner uninstall \\ -n jiukun_self_runner.service 执行uninstall会卸载该服务，与之对应的runner将无法通过该服务运行，请确保对应的CI任务已停止。 后端使用 pm2 直接在 host 上启用服务 大体与上面相同,就是在运行命令时,记得加入到 PATH 中. before_script: - export PATH=/usr/local/bin:/home/ubuntu/.nvm/versions/node/v10.15.3/bin:/home/ubuntu/.nvm/versions/node/v11.15.0/bin:$PATH web .gitlab-ci.yml image: node:11.15.0 stages: - install_deps # - test - build - deploy_test - deploy_production cache: # key: ${CI_BUILD_REF_NAME} paths: - node_modules/ - dist/ install_deps: stage: install_deps tags: - my-tag only: - dev - master script: - 'echo \"install_deps\"' - npm install -g cnpm - cnpm install # 运行测试用例 # test: # stage: test # tags: # - my-tag # only: # - dev2 # - master # script: # - npm run test # 编译 build: stage: build tags: - my-tag only: - dev - master script: - 'echo \"build\"' - npm install -g cnpm - cnpm run alpha # 部署测试服务器 deploy_test: stage: deploy_test tags: - my-tag only: - dev before_script: - export PATH=/usr/local/bin:$PATH - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )' - eval $(ssh-agent -s) - ssh-add ~/.ssh/known_hosts - chmod 644 ~/.ssh/known_hosts - '[[ -f /.dockerenv ]] && echo -e \"Host *\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\\n\" > ~/.ssh/config' script: - 'echo \"deploy_test\"' - scp -P 2222 -r dist/ root@192.168.168.137:/home/ubuntu/lcnx/local/lvchuang-web/ # 部署生产服务器 deploy_production: stage: deploy_production tags: - my-tag only: - master before_script: - export PATH=/usr/local/bin:$PATH - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )' - eval $(ssh-agent -s) - ssh-add ~/.ssh/known_hosts - chmod 644 ~/.ssh/known_hosts - '[[ -f /.dockerenv ]] && echo -e \"Host *\\\\n\\\\tStrictHostKeyChecking no\\\\n\\\\n\" > ~/.ssh/config' script: # - bash scripts/deploy/deploy.sh - 'echo \"deploy_test\"' - scp -r dist/ lcnx@120.77.39.189:/home/lcnx/lcnx_eiss/lvchuang-web/dist/ Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "},"post/project-cannot-set-domain.html":{"url":"post/project-cannot-set-domain.html","title":"project不能使用个人域名","keywords":"","body":"https://docs.gitlab.com/ee/user/project/pages/introduction.html#add-a-custom-domain-to-your-pages-website Note: Currently there is support only for custom domains on per-project basis. That means that if you add a custom domain (example.com) for your user website (username.example.io), a project that is served under username.example.io/foo, will not be accessible under example.com/foo 也就是说，如果你使用了 qqmm.app 来配置 eiuapp.gitlab.io 项目，则 https://qqmm.app/ 可以访问到，但是，https://qqmm.app/npcs-note/ 并不能访问到 npcs-note 项目。 Gitlab实践指南 | Gitlab实践指南点击关注【servicemesher】公众号回复【加群】加入学习群 | Copyright © eiuapp.github.io 2017-2019 all right reserved，powered by Gitbook Updated at 2020-05-28 03:07:11 "}}